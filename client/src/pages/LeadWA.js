import React, { useEffect, useState, useContext, useRef } from 'react'
import Sidebar from '../components/SideBar/Sidebar'
import TopDash from '../components/MainDash/TopDash';
import { FlagFilled, SyncOutlined } from "@ant-design/icons";
import './LeadWA.scss'
import { UserContext } from "../context";
import EmojiPicker, { Emoji } from 'emoji-picker-react';
import Message from '../components/Message/Message';
import axios from 'axios';
import { SearchOutlined } from '@ant-design/icons';
import toast from 'react-hot-toast';
import { SidebarContext } from '../context/SidebarContext';
import PopupModify from '../components/Table/popupModify/PopupModify';
import moment from 'moment';

export default function LeadWA() {

  const [isLoading, setIsLoading] = useState(true);
  const [state, setState] = useContext(UserContext);
  const userId = state.user._id;
  const [leadMessaging, setLeadMessaging] = useState();
  const [activeChat, setActiveChat] = useState([]);
  const [infoPopup, setInfoPopup] = useState(false);
  const [selectLead, setSelectLead] = useState();
  const [message, setMessage] = useState('');
  const [number, setNumber] = useState();
  //lead chat list
  const [leadsChat, setLeadsChat] = useState([]);
  
  const fetchLeads = async () => {

    try {
      const response = await axios.post('/get-lead-whatsapp', {
        _id: state.user._id
      }, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });


      const filteredTableLead = response.data.map((lead) => {
        return {
          name: lead.nome ? lead.nome : '',
          surname: lead.cognome ? lead.cognome : '',
          email: lead.email ? lead.email : '',
          date: lead.data,
          telephone: lead.numeroTelefono,
          status: lead.esito,
          facolta: lead.facolta ? lead.facolta : '',
          fatturato: lead.fatturato ? lead.fatturato : '',
          università: lead.università ? lead.università : '',
          campagna: lead.campagna,
          corsoDiLaurea: lead.corsoDiLaurea ? lead.corsoDiLaurea : '',
          oreStudio: lead.oreStudio ? lead.oreStudio : '',
          provincia: lead.provincia ? lead.provincia : '',
          note: lead.note ? lead.note : '',
          id: lead._id,
          fequentiUni: lead.frequentiUni ? lead.fequentiUni : false,
          lavoro: lead.lavoro ? lead.lavoro : false,
          oraChiamataRichiesto: lead.oraChiamataRichiesto ? lead.oraChiamataRichiesto : "",
        };
      });
      setLeadsChat(filteredTableLead.reverse());

    } catch (error) {
      console.error(error.message);
    }
  };

  useEffect(() => {
    fetchLeads();
  }, []);

  const handleInfoPopup = (lead) => {
    setSelectLead(lead);
    setInfoPopup(true);
  }



  const { isSidebarOpen } = useContext(SidebarContext);
  const containerStyle = {
    transition: 'width 0.3s ease',
  }

  const handleStartChat = (lead) => {
    console.log(lead)
    SETwindowtoggle(true)
    setTimeout(() => {
      const leadData = {
        id: lead.id,
        name: lead.name,
        surname: lead.surname,
        telephone: lead.telephone,
      };
      setLeadMessaging(leadData);
      SETselected(lead);
      SETwindowtoggle(!windowtoggle);
    }, 500);
  };

  console.log(leadMessaging);
  const handleAlreadyChat = (lead) => {
    console.log(lead);
    setTimeout(() => {
      const leadData = {
        id: lead._id,
        name: lead.nome && lead.nome !== null ? lead.nome : '',
        surname: lead.cognome,
        telephone: lead.numeroTelefono,
      };
      setLeadMessaging(leadData);
    }, 500);
  };

  const [data, SETdata] = useState({
    attiviArray: [
      "Christopher Gagnon",
      "Hannah McKeon",
      "Madeleine Bremer",
      "Wegahta Girmay",
      "Christopher Gagnon",
      "Hannah McKeon",
    ],

    tuttiArray: [
      "Christopher Gagnon",
      "Hannah McKeon",
      "Madeleine Bremer",
      "Wegahta Girmay",
      "Christopher Gagnon",
      "Hannah McKeon",
      "Madeleine Bremer",
      "Wegahta Girmay",
      "Christopher Gagnon",
      "Hannah McKeon",
      "Madeleine Bremer",
      "Wegahta Girmay",
      "Christopher Gagnon",
      "Hannah McKeon",
      "Madeleine Bremer",
      "Wegahta Girmay",
      "Christopher Gagnon",
      "Hannah McKeon",
      "Madeleine Bremer",
      "Wegahta Girmay",
      "Christopher Gagnon",
      "Hannah McKeon",
      "Madeleine Bremer",
      "Wegahta Girmay",
    ],

    //esempio messaggi di una converazione(fare sort su data/ora invio)
    messages: [
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "other"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "other"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "other"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "other"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "other"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "other"
      },
      {
        text: "please enter a message here and try again later to continue processing your message and try again",
        whois: "me"
      },
    ]
  });


  // Function to handle the button click event
  function handlePasteClick() {
    // Check if the Clipboard API is available
    if (navigator.clipboard) {
      // Read the text from the clipboard
      navigator.clipboard.readText().then(function (text) {
        SETinputMsg(text)
      }).catch(function (error) {
        console.error('Failed to read clipboard contents: ', error);
      });
    } else {
      console.error('Clipboard API not supported');
    }
  }



  const fetchChats = async () => {
    try {
      const response = await axios.get(`/getchats/${userId}`);
      const { chats } = response.data;
      console.log(response.data.chats);
      setActiveChat(chats.reverse());
      if (selected && selected._id) {
        const chatIndex = chats.findIndex(chat => chat.leadId._id === selected.leadId._id);
        if (chatIndex !== -1) {
          const updatedSelectedChat = { ...chats[chatIndex] };
          SETselected(updatedSelectedChat);
        }
      }
    } catch (error) {
      console.error(error);
    }
  };


  const sendMessageTest = async () => {
    try {
      const response = await axios.post('/sendMessageWa', {
        message: inputMsg,
        phoneNumber: leadMessaging.telephone,
        leadId: leadMessaging.id,
        userId: userId,
      });

      toast.success('Hai inviato il messaggio!');
      const chatAttiva = activeChat.find(chat => chat.leadId._id === leadMessaging.id);
      fetchChats();

      setActiveChat((prevChat) => {
        const chatIndex = prevChat.findIndex(chat => chat.leadId._id === leadMessaging.id);
        if (chatIndex !== -1) {

          const updatedChat = { ...prevChat[chatIndex] };
          console.log(updatedChat);
          const updatedMessages = [...updatedChat.messages, { content: inputMsg, sender: 'user' }];
          updatedChat.messages = updatedMessages;
          const updatedChats = [...prevChat];
          updatedChats[chatIndex] = updatedChat;
          SETselected(updatedChat);
          return updatedChats;
        } else {
          return [...prevChat, {
            id: 'new-chat-id',
            leadId: leadMessaging, 
            messages: [{ content: inputMsg, sender: 'user' }]
          }];
        }
      });

      SETinputMsg('');
    } catch (error) {
      console.error(error.message);
    }
  };


  useEffect(() => {
    setIsLoading(false)
  }, [])

  const [selected, SETselected] = useState(null);
  const [showEmojis, SETshowEmojis] = useState(false)
  const [selectedEmoji, SETselectedEmoji] = useState('')
  const [inputMsg, SETinputMsg] = useState('')
  const [windowtoggle, SETwindowtoggle] = useState(false)
  const [search, SETsearch] = useState('')

  const onEmojiClick = (emojiData, event) => {
    SETselectedEmoji(emojiData.unified);
    SETshowEmojis(false)
  }

  useEffect(() => {
    if (selectedEmoji) {
      let sym = selectedEmoji.split("-");
      let codesArray = [];
      sym.forEach((el) => codesArray.push("0x" + el));
      let emoji = String.fromCodePoint(...codesArray);
      SETinputMsg(inputMsg + emoji);
    }
  }, [selectedEmoji])

  useEffect(() => {

    const fetchChats = async () => {
      try {
        const response = await axios.get(`/getchats/${userId}`);
        const { chats } = response.data;
        console.log(response.data.chats);
        if (selected && selected._id) {
          const chatIndex = chats.findIndex(chat => chat.leadId._id === selected.leadId._id);
          if (chatIndex !== -1) {
            const updatedSelectedChat = { ...chats[chatIndex] };
            SETselected(updatedSelectedChat);
          }
        }
        setActiveChat(chats.reverse());
      } catch (error) {
        console.error(error);
      }
    };

    const interval = setInterval(() => {
      fetchChats();
    }, 5000);

    return () => {
      clearInterval(interval);
    };

  }, [sendMessageTest, selected, leadMessaging, handleKeyPress, windowtoggle ]);

  useEffect(() => {

    fetchChats();

  }, []);

  const handleKeyPress = (event) => {
    if (event.key === 'Enter') {
      sendMessageTest();
    }
  };

  const JustClosePopup = () => {
    setInfoPopup(false);
  };

  const deleteLead = async (leadId) => {
    try {
      const response = await axios.delete('/delete-lead', { data: { id: leadId } });
      console.log(response.data.message);
      toast.success('Hai eliminato correttamente il lead');
      fetchLeads();
      setInfoPopup(false);
    } catch (error) {
      console.error(error.message);
      toast.error('Si è verificato un errore.')
    }
  };

  const popupRef = useRef(null);

  return (
    <div className='dashboard big-container'>
      <Sidebar />
      {isLoading ?
        <div
          className="d-flex justify-content-center fw-bold"
          style={{ height: "90vh" }}
        >
          <div className="d-flex align-items-center">
            <SyncOutlined spin style={{ fontSize: "50px" }} />
          </div>
        </div>
        :
        <div id='bigcontwa' className={`${isSidebarOpen ? 'impostazioni-container' : 'impostazioni-container-closed'}`} style={containerStyle}>
          <TopDash hideexport hideall />

          <div className='wa-lead-list-conainer'>
            <h2>Lista dei Lead</h2>

            <div className="search-lead-wa">
              <SearchOutlined color="white" id='looptopdash' />
              <input type="text" placeholder='Cerca lead...' onChange={(e) => SETsearch(e.target.value)} />
            </div>

            <div className='lead-list-chat'>
              {leadsChat.filter(l => l.name.toLocaleLowerCase().includes(search.toLocaleLowerCase()) || l.surname.toLocaleLowerCase().includes(search.toLocaleLowerCase()) || l.telephone.includes(search)).map((lead) => (
                <div id='leadentrywa' key={lead.id}>
                  <span>
                    <div>
                      {lead.name ? lead.name + " " + lead.surname : ''}
                    </div>
                    <div>
                      {lead.telephone && lead.telephone}
                    </div>
                  </span>
                  <div style={{display: 'flex', justifyContent: 'center', gap: '0.3rem', marginTop: '10px'}}>                  
                    <button onClick={() => handleStartChat(lead)}>Avvia chat</button>
                    <button onClick={() => handleInfoPopup(lead)}>Info</button>
                  </div>

                </div>
              ))}
            </div>
          </div>

          <div className='wabody'>
            <button id='switchwindow' onClick={() => SETwindowtoggle(!windowtoggle)}>

              <svg fill="#000000" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 276.167 276.167">
                <g>
                  <g>
                    <path d="M33.144,2.471C15.336,2.471,0.85,16.958,0.85,34.765s14.48,32.293,32.294,32.293s32.294-14.486,32.294-32.293
			S50.951,2.471,33.144,2.471z"/>
                    <path d="M137.663,2.471c-17.807,0-32.294,14.487-32.294,32.294s14.487,32.293,32.294,32.293c17.808,0,32.297-14.486,32.297-32.293
			S155.477,2.471,137.663,2.471z"/>
                    <path d="M243.873,67.059c17.804,0,32.294-14.486,32.294-32.293S261.689,2.471,243.873,2.471s-32.294,14.487-32.294,32.294
			S226.068,67.059,243.873,67.059z"/>
                    <path d="M32.3,170.539c17.807,0,32.297-14.483,32.297-32.293c0-17.811-14.49-32.297-32.297-32.297S0,120.436,0,138.246
			C0,156.056,14.493,170.539,32.3,170.539z"/>
                    <path d="M136.819,170.539c17.804,0,32.294-14.483,32.294-32.293c0-17.811-14.478-32.297-32.294-32.297
			c-17.813,0-32.294,14.486-32.294,32.297C104.525,156.056,119.012,170.539,136.819,170.539z"/>
                    <path d="M243.038,170.539c17.811,0,32.294-14.483,32.294-32.293c0-17.811-14.483-32.297-32.294-32.297
			s-32.306,14.486-32.306,32.297C210.732,156.056,225.222,170.539,243.038,170.539z"/>
                    <path d="M33.039,209.108c-17.807,0-32.3,14.483-32.3,32.294c0,17.804,14.493,32.293,32.3,32.293s32.293-14.482,32.293-32.293
			S50.846,209.108,33.039,209.108z"/>
                    <path d="M137.564,209.108c-17.808,0-32.3,14.483-32.3,32.294c0,17.804,14.487,32.293,32.3,32.293
			c17.804,0,32.293-14.482,32.293-32.293S155.368,209.108,137.564,209.108z"/>
                    <path d="M243.771,209.108c-17.804,0-32.294,14.483-32.294,32.294c0,17.804,14.49,32.293,32.294,32.293
			c17.811,0,32.294-14.482,32.294-32.293S261.575,209.108,243.771,209.108z"/>
                  </g>
                </g>
              </svg>
            </button>


            <div className={"rightwa " + (windowtoggle ? "showwindow" : "")}>
              <div className="row1">
                <div className="nameicon">
                  <svg className='icon' width="33" height="27" viewBox="0 0 33 27" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16.3352 6.70366C16.3352 6.86414 16.3284 7.02121 16.3181 7.18169C16.3113 7.25339 16.3045 7.32169 16.2976 7.39339C16.2874 7.48217 16.3318 7.48217 16.301 7.37632C16.3113 7.41046 16.284 7.48217 16.2806 7.51631C16.2328 7.81338 16.161 8.10361 16.0689 8.39043C16.0245 8.52701 15.9733 8.66359 15.9186 8.79676C15.8708 8.91627 15.9357 8.76603 15.9357 8.7592C15.9391 8.7831 15.8913 8.86163 15.8811 8.88213C15.8503 8.95042 15.8162 9.01871 15.782 9.087C15.6455 9.35333 15.4918 9.60942 15.3177 9.85528C15.2972 9.88601 15.1811 10.0499 15.2391 9.96455C15.2972 9.87918 15.1743 10.0431 15.1538 10.0704C15.0582 10.1865 14.9591 10.2958 14.8567 10.405C14.7543 10.5109 14.645 10.6167 14.5357 10.7157C14.4845 10.7601 14.4367 10.8045 14.3821 10.8489C14.3548 10.8728 14.324 10.8967 14.2967 10.9206C14.2865 10.9309 14.2728 10.9377 14.2626 10.9479C14.2045 10.9923 14.2148 10.9855 14.2933 10.924C14.2728 10.9684 14.1499 11.0299 14.1123 11.0572C14.0645 11.0913 14.0133 11.1255 13.9655 11.1596C13.8358 11.245 13.6992 11.3269 13.5626 11.4021C13.4363 11.4704 13.3099 11.5352 13.1802 11.5967C13.1529 11.6103 13.1255 11.6206 13.0982 11.6342C12.9548 11.7025 13.2416 11.5796 13.0948 11.6377C13.0231 11.665 12.9548 11.6923 12.8831 11.7196C12.5963 11.8255 12.2992 11.9074 11.9988 11.9655C11.9305 11.9791 11.8622 11.9928 11.7939 12.003C11.7632 12.0064 11.7085 12.0269 11.6778 12.0201C11.7597 12.0406 11.7973 12.0064 11.7188 12.0133C11.5617 12.0303 11.4046 12.044 11.2476 12.0508C10.93 12.0645 10.6125 12.0474 10.2949 12.0133C10.1651 11.9996 10.329 12.0235 10.3359 12.0201C10.3051 12.0303 10.23 12.003 10.1959 11.9996C10.1276 11.9894 10.0593 11.9757 9.99101 11.962C9.84077 11.9313 9.69053 11.8938 9.5437 11.8528C9.40371 11.8118 9.26713 11.7674 9.13055 11.7196C9.05884 11.6923 8.99055 11.665 8.91885 11.6377C8.8369 11.6069 8.90177 11.6616 8.95641 11.6547C8.92567 11.6582 8.86421 11.6138 8.83348 11.6001C8.56032 11.4738 8.2974 11.3269 8.04815 11.163C7.99351 11.1255 7.93547 11.0879 7.88083 11.0504C7.83986 11.0231 7.73742 10.9752 7.71694 10.9309C7.74084 10.9479 7.76133 10.965 7.78523 10.9821C7.76816 10.9684 7.75108 10.9548 7.73401 10.9411C7.7067 10.9172 7.67596 10.8933 7.64865 10.8694C7.58719 10.8182 7.52231 10.7635 7.46427 10.7089C7.24915 10.5143 7.04769 10.306 6.85989 10.0807C6.83599 10.0534 6.81209 10.0226 6.78819 9.99531C6.78478 9.98848 6.77795 9.98506 6.77453 9.97824C6.73014 9.92019 6.73697 9.93043 6.79843 10.009C6.75404 9.98848 6.70624 9.88604 6.67892 9.84507C6.58673 9.71532 6.50136 9.58557 6.42283 9.44898C6.35454 9.33289 6.28967 9.21338 6.2282 9.09387C6.19406 9.02558 6.15991 8.95729 6.12918 8.889C6.11553 8.86168 6.10528 8.83437 6.09162 8.80705C6.03016 8.67389 6.13943 8.92998 6.08821 8.80364C5.97553 8.52023 5.87993 8.23 5.80822 7.93295C5.77749 7.79637 5.74676 7.65979 5.72627 7.52321C5.71944 7.49248 5.69554 7.41395 5.70578 7.38321C5.70237 7.39346 5.72627 7.55394 5.71261 7.42419C5.70237 7.33882 5.69554 7.25346 5.68871 7.16469C5.66481 6.85396 5.66481 6.54324 5.69212 6.2325C5.69895 6.15397 5.70578 6.07543 5.71602 5.9969C5.72285 5.91837 5.68871 5.95593 5.7092 6.03788C5.70237 6.00714 5.72285 5.95251 5.72627 5.92178C5.75358 5.7613 5.78432 5.60082 5.82187 5.44375C5.89017 5.16034 5.98577 4.88718 6.09162 4.61746C6.14967 4.46722 6.02674 4.75745 6.09503 4.61404C6.10869 4.58673 6.11893 4.55941 6.13259 4.53209C6.16332 4.4638 6.19747 4.39551 6.23161 4.32723C6.29991 4.19406 6.37161 4.06089 6.45014 3.93455C6.51844 3.81846 6.59355 3.70578 6.67209 3.59651C6.6994 3.55895 6.75745 3.43603 6.80525 3.41555C6.75062 3.43945 6.72672 3.51115 6.78135 3.44628C6.8155 3.4053 6.84623 3.36433 6.88037 3.32335C7.06817 3.10141 7.26963 2.88971 7.48474 2.69848C7.53937 2.64726 7.59742 2.59946 7.65547 2.55165C7.68279 2.53117 7.84668 2.40824 7.76132 2.46629C7.67596 2.52434 7.83985 2.40824 7.87058 2.38776C7.94229 2.33654 8.01741 2.28532 8.09253 2.23752C8.33154 2.08387 8.58081 1.94387 8.84034 1.82436C8.86424 1.81412 8.93936 1.7629 8.96326 1.76973C8.95644 1.76973 8.8062 1.83119 8.9257 1.7868C8.99741 1.75948 9.0657 1.73217 9.1374 1.70485C9.28082 1.65363 9.42764 1.60583 9.57446 1.56486C9.70763 1.5273 9.84421 1.49656 9.97738 1.46584C10.0525 1.44876 10.131 1.43511 10.2062 1.42486C10.2437 1.41803 10.2847 1.41462 10.3222 1.40779C10.3871 1.39755 10.1652 1.42486 10.3257 1.40779C10.633 1.37364 10.9437 1.35999 11.2544 1.37364C11.4046 1.38047 11.5549 1.39072 11.7051 1.40779C11.7529 1.41462 11.8622 1.44194 11.6881 1.40438C11.7188 1.4112 11.7495 1.41462 11.7803 1.41803C11.8724 1.43169 11.9646 1.44876 12.0534 1.46925C12.3471 1.53071 12.6339 1.61266 12.9139 1.7151C12.9787 1.739 13.0402 1.7629 13.1051 1.79022C13.2485 1.84485 12.9992 1.739 13.088 1.78339C13.1221 1.80046 13.1563 1.81412 13.1904 1.83119C13.327 1.89265 13.4602 1.96094 13.5934 2.03606C13.7163 2.10435 13.8392 2.17947 13.9587 2.258C14.0133 2.29556 14.0714 2.33312 14.126 2.37068C14.1568 2.39117 14.1875 2.41507 14.2182 2.43556C14.2353 2.44922 14.2558 2.46288 14.2728 2.47654C14.3309 2.52093 14.3207 2.51068 14.2421 2.45263C14.348 2.49019 14.4675 2.63702 14.5494 2.71214C14.6621 2.81115 14.768 2.91359 14.8704 3.02286C14.9728 3.12871 15.0718 3.24139 15.1675 3.35748C15.2016 3.39846 15.2631 3.44626 15.2801 3.49748C15.2631 3.47358 15.246 3.45309 15.2289 3.42919C15.246 3.45309 15.2665 3.47699 15.2835 3.50089C15.3109 3.53845 15.3348 3.57259 15.3621 3.61016C15.5294 3.84917 15.6796 4.10185 15.8128 4.36134C15.8435 4.4228 15.8743 4.48426 15.9016 4.54572C15.9187 4.57986 15.9323 4.61401 15.9494 4.64815C15.9938 4.73693 15.8879 4.48767 15.9426 4.63108C15.9972 4.77108 16.0518 4.91449 16.0996 5.05789C16.1952 5.35154 16.2635 5.65202 16.3147 5.95593C16.3182 5.98666 16.3216 6.01739 16.3284 6.04812C16.2942 5.88422 16.3181 5.96276 16.3216 6.00715C16.3284 6.08568 16.3386 6.16421 16.3455 6.24275C16.3318 6.38274 16.3352 6.54318 16.3352 6.70366C16.3352 7.06219 16.6494 7.40369 17.0182 7.38664C17.387 7.3696 17.7011 7.08616 17.7011 6.70371C17.6943 5.3379 17.2811 3.96185 16.4787 2.84872C15.666 1.71848 14.5598 0.87171 13.2554 0.390258C10.6638 -0.562407 7.59409 0.274162 5.84598 2.40822C4.95138 3.50431 4.4153 4.81205 4.30603 6.22569C4.20018 7.58807 4.54163 8.9949 5.24846 10.166C5.9314 11.2963 6.96254 12.2386 8.16789 12.785C9.4825 13.3791 10.9269 13.5532 12.3473 13.2732C15.0072 12.7474 17.1925 10.4938 17.6023 7.80999C17.6569 7.44463 17.6945 7.07585 17.6979 6.7071C17.6979 6.34857 17.3837 6.00712 17.0149 6.02416C16.6496 6.03782 16.3389 6.32122 16.3354 6.70366L16.3352 6.70366Z" />
                    <path d="M28.4332 8.59862C28.4332 8.7113 28.4298 8.82057 28.4196 8.93325C28.4162 8.98788 28.4093 9.04251 28.4059 9.09715C28.3889 9.26787 28.4264 8.98447 28.3991 9.14836C28.365 9.36689 28.3103 9.58542 28.242 9.79715C28.2079 9.89958 28.1737 9.99861 28.1328 10.0976C28.0884 10.2103 28.1908 9.97811 28.1225 10.1215C28.0952 10.1762 28.0713 10.2308 28.044 10.2854C27.945 10.4801 27.8357 10.6644 27.7094 10.842C27.6855 10.8761 27.6411 10.9649 27.6035 10.9854C27.6001 10.9888 27.6957 10.8796 27.6411 10.9342C27.6274 10.9513 27.6138 10.9683 27.6001 10.9854C27.525 11.0776 27.4464 11.1664 27.3611 11.2517C27.2894 11.3269 27.2143 11.3986 27.1357 11.4669C27.1016 11.4976 27.0674 11.5249 27.0333 11.5556C27.0094 11.5761 26.9889 11.5932 26.965 11.6137C26.8694 11.6956 27.0504 11.5556 26.9787 11.6034C26.8011 11.7298 26.627 11.8527 26.4357 11.9551C26.3436 12.0063 26.2514 12.0541 26.1558 12.0985C26.1353 12.1088 26.1148 12.1156 26.0943 12.1259C26.0123 12.1702 26.2172 12.0781 26.1319 12.1088C26.0738 12.1293 26.0192 12.1532 25.9611 12.1737C25.7528 12.2488 25.5377 12.3102 25.3226 12.3512C25.2679 12.3615 25.2167 12.3717 25.1621 12.3785C25.0016 12.4059 25.2611 12.3717 25.1348 12.382C25.0187 12.3956 24.8992 12.4059 24.7797 12.4093C24.5475 12.4161 24.3221 12.4059 24.0899 12.382C23.9636 12.3683 24.2231 12.4024 24.0626 12.3785C24.008 12.3683 23.9568 12.3615 23.9021 12.3512C23.7895 12.3273 23.6768 12.3 23.5675 12.2693C23.4651 12.242 23.3626 12.2078 23.2636 12.1703C23.2124 12.1532 23.1646 12.1327 23.1168 12.1122C23.0246 12.0781 23.1339 12.1361 23.1543 12.1293C23.1441 12.1327 23.0826 12.0985 23.0724 12.0917C22.8744 11.9995 22.6866 11.8937 22.5022 11.7776C22.4134 11.7195 22.3314 11.6581 22.2461 11.5966C22.171 11.5454 22.3451 11.682 22.2802 11.6205C22.2632 11.6069 22.2461 11.5932 22.229 11.5795C22.1846 11.542 22.1368 11.5044 22.0924 11.4635C21.9319 11.32 21.7817 11.163 21.6451 10.9991C21.6246 10.9752 21.6076 10.9513 21.5871 10.9308C21.5359 10.8727 21.628 10.982 21.6246 10.982C21.5905 10.9615 21.5563 10.8898 21.5324 10.8557C21.4676 10.7635 21.4061 10.6713 21.3481 10.5757C21.2934 10.4869 21.2422 10.3947 21.1944 10.3025C21.1705 10.2547 21.1466 10.2069 21.1261 10.1625C21.1125 10.1352 21.1022 10.1079 21.0886 10.0806C21.0476 10.002 21.15 10.241 21.0954 10.0976C21.0168 9.89959 20.952 9.69814 20.9008 9.48985C20.8769 9.384 20.8529 9.27815 20.8359 9.1723C20.8359 9.1723 20.8154 9.08694 20.8222 9.08011C20.8188 9.08352 20.8427 9.25767 20.829 9.12108C20.8222 9.05962 20.8154 8.99475 20.812 8.93328C20.7949 8.70451 20.7949 8.47232 20.8154 8.24354C20.8188 8.18891 20.8256 8.13428 20.8325 8.07964C20.8461 7.95331 20.8086 8.22647 20.8359 8.05233C20.8529 7.93965 20.8768 7.82355 20.9042 7.71087C20.9554 7.49576 21.0305 7.29088 21.109 7.08263C21.1364 7.01093 21.0851 7.14409 21.0851 7.14068C21.0817 7.13385 21.1159 7.07238 21.1227 7.05873C21.1432 7.01093 21.1671 6.96312 21.191 6.91532C21.2422 6.8163 21.2968 6.71727 21.3549 6.62167C21.4095 6.53289 21.4676 6.44411 21.5256 6.35875C21.5563 6.31778 21.5871 6.27339 21.6178 6.23242C21.6622 6.17095 21.5802 6.28363 21.5802 6.28363C21.5768 6.27339 21.6417 6.20852 21.6519 6.19827C21.7885 6.03437 21.9388 5.87731 22.0993 5.73389C22.1368 5.69975 22.1778 5.6656 22.2188 5.63146C22.2358 5.6178 22.2529 5.60414 22.27 5.59049C22.3622 5.51195 22.2427 5.60756 22.2358 5.61439C22.2802 5.54269 22.4373 5.46756 22.509 5.41976C22.69 5.30025 22.8812 5.1944 23.0792 5.10563C23.0929 5.0988 23.1543 5.06465 23.1612 5.06807C23.1646 5.06807 23.0314 5.11928 23.1031 5.09197C23.1543 5.0749 23.2021 5.05441 23.25 5.03392C23.3558 4.99295 23.4651 4.9588 23.5743 4.92807C23.6768 4.89734 23.7826 4.87344 23.8885 4.85295C23.9431 4.84271 23.9943 4.83247 24.0489 4.82222C24.0797 4.81881 24.1138 4.81539 24.1411 4.80856C24.107 4.81881 24.0046 4.82564 24.1002 4.81539C24.3358 4.79149 24.5748 4.78125 24.8138 4.78808C24.9163 4.79149 25.0187 4.80174 25.1211 4.81198C25.2987 4.83247 25.0221 4.79491 25.1484 4.81539C25.2099 4.82564 25.2714 4.83588 25.3328 4.84954C25.5582 4.89393 25.7801 4.95539 25.9952 5.03734C26.0362 5.05441 26.0806 5.07148 26.1216 5.08514C26.2445 5.13294 26.0874 5.06807 26.084 5.06807C26.0908 5.06465 26.166 5.10563 26.166 5.10563C26.2684 5.15343 26.3674 5.20465 26.4664 5.25928C26.5586 5.3105 26.6474 5.36513 26.7362 5.41976C26.8079 5.46756 26.965 5.53927 27.0093 5.61439C27.0128 5.6178 26.9001 5.52561 26.9581 5.57683C26.9786 5.59732 27.0059 5.61439 27.0264 5.63488C27.0674 5.66902 27.1049 5.70317 27.1459 5.73731C27.2279 5.81243 27.3098 5.88755 27.3849 5.9695C27.4566 6.04462 27.5249 6.12315 27.5932 6.20169C27.6069 6.21877 27.6205 6.23584 27.6342 6.25291C27.682 6.30754 27.682 6.26657 27.6103 6.21876C27.6513 6.24608 27.6888 6.32461 27.7161 6.36218C27.8391 6.53974 27.9517 6.72412 28.0508 6.91875C28.0747 6.96655 28.0986 7.01435 28.1191 7.06216C28.1293 7.08265 28.1361 7.10313 28.1464 7.12362C28.1874 7.20557 28.0986 6.99728 28.1293 7.08606C28.1669 7.19191 28.2113 7.29776 28.2454 7.40702C28.3137 7.61872 28.3649 7.83725 28.4025 8.05581C28.4298 8.21629 28.3956 7.95679 28.4059 8.08312C28.4127 8.13776 28.4161 8.19239 28.423 8.24702C28.4298 8.3597 28.4332 8.47921 28.4332 8.59872C28.4366 8.95724 28.7473 9.2987 29.1161 9.28165C29.4849 9.26458 29.8024 8.98118 29.7991 8.59872C29.7888 6.40999 28.3991 4.47057 26.3504 3.71939C24.3666 2.99212 21.9969 3.63402 20.6584 5.26614C19.9619 6.11634 19.5487 7.12021 19.4565 8.21629C19.3677 9.26798 19.6341 10.3606 20.177 11.262C20.7028 12.1327 21.4984 12.8703 22.4306 13.2902C23.4618 13.7546 24.5783 13.8878 25.688 13.6658C27.7231 13.2595 29.4065 11.5181 29.7206 9.46257C29.765 9.17575 29.7957 8.88893 29.7957 8.59869C29.7991 8.24017 29.4816 7.89871 29.1128 7.91576C28.744 7.93283 28.4367 8.21623 28.4333 8.59869L28.4332 8.59862Z" />
                    <path d="M20.6173 22.0045V24.2478C20.6173 24.3537 20.6139 24.4561 20.6139 24.562C20.6139 24.719 20.6548 24.4152 20.6139 24.5654C20.607 24.5961 20.6002 24.6269 20.5934 24.6542C20.59 24.6644 20.5592 24.7839 20.5524 24.7839C20.5524 24.7839 20.6275 24.6439 20.5558 24.7634C20.5353 24.7942 20.5217 24.8283 20.5012 24.8625C20.4944 24.8761 20.4841 24.8864 20.4773 24.9C20.4363 24.9615 20.4431 24.9512 20.5046 24.8693C20.5149 24.9 20.3407 25.04 20.3202 25.0605C20.211 25.1629 20.4466 24.9888 20.3168 25.0605C20.2895 25.0742 20.2656 25.0912 20.2417 25.1083C20.2315 25.1151 20.129 25.1766 20.1222 25.1698C20.1495 25.1595 20.1768 25.1459 20.2007 25.1356C20.1734 25.1459 20.1427 25.1561 20.1154 25.1663C20.0846 25.1766 20.0573 25.1834 20.0266 25.1902C20.0129 25.1937 19.9958 25.1971 19.9822 25.2005C19.9071 25.2141 19.9207 25.2107 20.0266 25.1971C20.0232 25.2073 19.8968 25.2039 19.8832 25.2039H19.8319C18.8656 25.2073 17.8993 25.2039 16.933 25.2039H11.3878H5.68214H2.29837H2.10715H2.05935C2.04228 25.2039 2.02862 25.2039 2.01155 25.2005C1.93643 25.1937 1.95009 25.1971 2.05252 25.2073C2.04911 25.2142 1.9535 25.1868 1.93984 25.1834C1.90228 25.1732 1.86814 25.1595 1.83058 25.1527C1.68375 25.1151 1.96033 25.2278 1.82716 25.1527C1.79302 25.1356 1.76228 25.1185 1.72814 25.0981C1.70766 25.0878 1.69058 25.0742 1.6701 25.0639C1.60863 25.0229 1.61888 25.0298 1.70083 25.0912C1.67351 25.0981 1.56083 24.9649 1.54034 24.941C1.5301 24.9307 1.51986 24.9205 1.50961 24.9068C1.46181 24.8488 1.47205 24.8625 1.53352 24.941C1.52669 24.9444 1.46522 24.8386 1.46181 24.8283C1.44815 24.801 1.4345 24.7737 1.42084 24.7498C1.34572 24.6166 1.4584 24.8932 1.42084 24.7464C1.4106 24.702 1.39352 24.661 1.38328 24.6132C1.37986 24.5995 1.37645 24.5825 1.37304 24.5688C1.35938 24.4937 1.36279 24.5073 1.37645 24.6132C1.35596 24.6064 1.36962 24.3025 1.36962 24.2717V23.6879V22.2913V22.0079C1.36962 21.8645 1.37304 21.7211 1.38328 21.5777C1.39011 21.4821 1.39694 21.3899 1.40718 21.2943C1.41059 21.2635 1.41401 21.2328 1.41742 21.2021C1.42767 21.127 1.42425 21.1406 1.41059 21.2431C1.41401 21.2123 1.42084 21.1816 1.42425 21.1509C1.47547 20.8162 1.55059 20.485 1.65303 20.1607C1.70083 20.007 1.75205 19.8568 1.8101 19.7065C1.82375 19.6724 1.83741 19.6348 1.85107 19.6007C1.90912 19.4505 1.78619 19.7407 1.85448 19.5973C1.89204 19.5153 1.9296 19.4334 1.96716 19.3514C2.11058 19.0544 2.27789 18.7675 2.46227 18.4944C2.50325 18.4329 2.54764 18.3714 2.59202 18.31C2.60909 18.2827 2.64324 18.2178 2.67055 18.2007C2.65348 18.2246 2.63641 18.2451 2.61934 18.269C2.63641 18.2451 2.6569 18.2212 2.67397 18.1973C2.7764 18.071 2.88225 17.9446 2.99493 17.8251C3.21688 17.5861 3.45589 17.3607 3.71196 17.1525C3.74269 17.1286 3.78025 17.0842 3.81781 17.0705C3.67098 17.1388 3.77342 17.1047 3.82122 17.0705C3.88269 17.0262 3.94074 16.9818 4.00219 16.9408C4.14219 16.8418 4.28902 16.7496 4.43925 16.6642C4.57583 16.5857 4.71583 16.5106 4.85583 16.4389C4.92412 16.4047 4.99241 16.374 5.06069 16.3432C5.09143 16.3296 5.15289 16.2886 5.18362 16.2886C5.09143 16.3262 5.07777 16.333 5.14606 16.3057C5.17338 16.2954 5.20069 16.2818 5.23142 16.2715C5.54556 16.1486 5.86653 16.0496 6.19433 15.9745C6.34457 15.9403 6.49822 15.9096 6.65188 15.8857C6.69626 15.8789 6.74748 15.8618 6.79187 15.8652C6.6109 15.8584 6.74407 15.872 6.79529 15.8652C6.89089 15.855 6.98308 15.8447 7.07869 15.8413C7.24942 15.8311 7.42015 15.8242 7.58746 15.8242H9.31521H14.2902H14.42C14.577 15.8242 14.7341 15.8311 14.8946 15.8413C14.9902 15.8481 15.0892 15.855 15.1848 15.8686C15.2121 15.872 15.4033 15.8994 15.2326 15.872C15.2907 15.8823 15.3453 15.8891 15.4033 15.8994C15.8233 15.9711 16.2365 16.0803 16.6326 16.2306C16.677 16.2476 16.7214 16.2647 16.7623 16.2818C16.7862 16.292 16.957 16.3671 16.8067 16.2989C16.8921 16.3364 16.9775 16.374 17.0594 16.415C17.2609 16.5106 17.4555 16.6164 17.6433 16.7325C17.8004 16.8281 17.954 16.9305 18.1043 17.0398C18.1486 17.0705 18.1965 17.1047 18.2374 17.1388C18.1179 17.0364 18.2101 17.1183 18.2408 17.1422C18.3262 17.2105 18.4116 17.2822 18.4935 17.3539C18.7735 17.5998 19.033 17.8695 19.2686 18.1598C19.2959 18.1939 19.3198 18.2246 19.3471 18.2588C19.412 18.3407 19.2515 18.1256 19.3471 18.2622C19.4018 18.3373 19.4564 18.4124 19.511 18.491C19.6203 18.6514 19.7262 18.8188 19.8218 18.9895C19.9105 19.1466 19.9925 19.307 20.0676 19.4675C20.0847 19.5051 20.1018 19.5461 20.1222 19.5836C20.1974 19.7441 20.071 19.447 20.1325 19.6109C20.17 19.7065 20.2076 19.8021 20.2418 19.9012C20.3647 20.246 20.4569 20.6011 20.5252 20.9631C20.5354 21.0143 20.5422 21.0689 20.5525 21.1202C20.5593 21.1543 20.5969 21.3284 20.5593 21.1509C20.5764 21.2363 20.5798 21.3285 20.5866 21.4172C20.6105 21.605 20.6174 21.8031 20.6174 22.0045C20.6174 22.363 20.9315 22.7045 21.3003 22.6875C21.6691 22.6704 21.9832 22.387 21.9832 22.0045C21.9764 20.27 21.3789 18.6207 20.3033 17.2617C19.2414 15.9198 17.6741 14.9604 15.9976 14.6155C15.1951 14.4516 14.3996 14.4516 13.5869 14.4516H10.8041H8.15785C7.34517 14.4516 6.53935 14.4755 5.74378 14.6701C2.88242 15.3666 0.580985 17.8183 0.116641 20.7343C-0.0335955 21.687 0.00737569 22.6567 0.00737569 23.6161C0.00737569 23.9439 -0.013112 24.2785 0.0142043 24.6063C0.0927376 25.5044 0.734666 26.3272 1.64294 26.5117C1.98439 26.58 2.32925 26.5629 2.67752 26.5629H4.38137H9.81726H15.7892H19.5623H19.8594C20.4364 26.5595 21.0169 26.3307 21.4096 25.9005C21.7408 25.5351 21.9286 25.0947 21.9695 24.6064C21.9798 24.4903 21.9764 24.3742 21.9764 24.2547V22.882V22.0011C21.9764 21.6426 21.6622 21.3011 21.2934 21.3182C20.9315 21.3353 20.6174 21.6187 20.6174 22.0045L20.6173 22.0045Z" />
                    <path d="M31.6294 20.2082V21.533V22.3286C31.6294 22.3901 31.626 22.4481 31.6294 22.5096V22.5198V22.5676C31.6191 22.5574 31.6669 22.4379 31.6396 22.4993C31.6328 22.5164 31.626 22.5471 31.6226 22.5642C31.5986 22.6939 31.626 22.5164 31.643 22.5266C31.643 22.5266 31.6157 22.5813 31.6123 22.5847C31.544 22.7178 31.6225 22.5642 31.6294 22.571C31.6328 22.5744 31.5372 22.6666 31.5372 22.6632C31.5099 22.6359 31.6669 22.5881 31.5679 22.6325C31.5508 22.6393 31.5269 22.653 31.5099 22.6632C31.4484 22.7076 31.5679 22.6257 31.5713 22.6393C31.5713 22.6427 31.4962 22.6598 31.486 22.6632C31.3665 22.7008 31.6191 22.6666 31.4826 22.6598H31.4484H31.2196H30.2226H26.849H23.2603C22.6184 22.6598 21.9696 22.6359 21.3243 22.6598H21.2936L21.9765 23.3427C21.9765 22.6632 22.0106 21.9735 21.9423 21.2974C21.8058 19.9692 21.3516 18.6819 20.5595 17.5995C20.0917 16.9644 19.5556 16.4249 18.9308 15.9434C18.9752 16.302 19.023 16.6571 19.0673 17.0156C19.1083 16.9815 19.1493 16.9439 19.1903 16.9098C19.2108 16.8927 19.3542 16.7834 19.221 16.8824C19.2927 16.8278 19.3644 16.7766 19.4395 16.7254C19.6205 16.6059 19.8083 16.4966 19.9995 16.401C20.0473 16.3771 20.0985 16.3566 20.1463 16.3327C20.3102 16.2542 20.0132 16.3805 20.1839 16.3156C20.2693 16.2849 20.3546 16.2508 20.44 16.2234C20.6517 16.1517 20.8634 16.0971 21.0819 16.0561C21.1331 16.0459 21.1946 16.0288 21.2492 16.0288C21.0785 16.0322 21.2595 16.0288 21.2902 16.0254C21.3858 16.0152 21.478 16.0083 21.5736 16.0049C21.6556 16.0015 21.7375 15.9981 21.8229 15.9981H22.0482H24.592H27.1393H27.3851H27.4602C27.5558 15.9981 27.6515 16.0015 27.7471 16.0083C27.8222 16.0152 27.9656 15.9981 28.0305 16.0356C27.9997 16.0322 27.9724 16.0288 27.9417 16.0254C27.9724 16.0288 28.0032 16.0356 28.0339 16.0391C28.0783 16.0459 28.1261 16.0561 28.1705 16.063C28.2456 16.0766 28.3207 16.0937 28.3958 16.1142C28.5734 16.1586 28.7509 16.2098 28.9217 16.2747C28.9661 16.2917 29.007 16.3088 29.048 16.3225C29.1914 16.3771 28.9422 16.2712 29.0309 16.3156C29.1061 16.3532 29.1812 16.3839 29.2563 16.4215C29.4168 16.5034 29.5738 16.5922 29.7241 16.6912C29.7992 16.739 29.8743 16.7902 29.946 16.8449C29.9597 16.8551 29.9699 16.862 29.9836 16.8722C30.0416 16.9166 30.0314 16.9063 29.9529 16.8483C29.9938 16.8551 30.0587 16.9337 30.0929 16.961C30.2363 17.0805 30.3694 17.2102 30.4958 17.3468C30.5606 17.4185 30.6255 17.4902 30.687 17.5653C30.7041 17.5892 30.7655 17.6405 30.7723 17.6712C30.7177 17.5961 30.7041 17.5824 30.7348 17.62C30.7484 17.637 30.7621 17.6541 30.7758 17.6746C30.8919 17.8317 30.9943 17.9956 31.0899 18.1663C31.1411 18.2585 31.1889 18.3507 31.2367 18.4463C31.2504 18.4736 31.264 18.5009 31.2743 18.5282C31.2879 18.5556 31.2982 18.5829 31.3118 18.6102C31.2743 18.518 31.2675 18.5043 31.2948 18.5726C31.3665 18.757 31.4313 18.9448 31.4826 19.136C31.5065 19.2248 31.527 19.317 31.5474 19.4058C31.5577 19.4502 31.5645 19.498 31.5748 19.5424C31.5816 19.5902 31.5952 19.7984 31.585 19.5936C31.6021 19.7984 31.6294 19.9999 31.6294 20.2082C31.6328 20.5667 31.9435 20.9082 32.3123 20.8911C32.6811 20.8741 32.9986 20.5906 32.9953 20.2082C32.9884 18.6102 32.2919 17.0361 31.0695 15.9981C30.0212 15.1103 28.7237 14.6391 27.351 14.6391H22.2121C21.7887 14.6391 21.3756 14.6493 20.9556 14.7108C19.8937 14.8644 18.9171 15.3527 18.1113 16.0527C17.9508 16.1926 17.8962 16.4248 17.9235 16.6263C17.9542 16.8551 18.0737 16.9882 18.2478 17.1248C18.1147 17.0224 18.2752 17.1487 18.3093 17.176C18.3674 17.2238 18.4254 17.2751 18.4835 17.3229C18.5996 17.4219 18.7088 17.5277 18.8181 17.637C18.9205 17.7394 19.0195 17.8453 19.1117 17.9511C19.1561 18.0023 19.2005 18.0536 19.2449 18.1048C19.2654 18.1321 19.2893 18.156 19.3098 18.1833C19.3234 18.2004 19.4088 18.3165 19.3507 18.2345C19.2859 18.1458 19.3849 18.2823 19.3883 18.2892C19.4088 18.3165 19.4293 18.3438 19.4464 18.3711C19.4873 18.4257 19.5249 18.4838 19.5624 18.5384C19.6478 18.6648 19.7298 18.7979 19.8049 18.9277C19.8732 19.0472 19.938 19.1667 19.9995 19.2896C20.0302 19.3511 20.061 19.4125 20.0883 19.474C20.1019 19.5047 20.1156 19.5355 20.1293 19.5662C20.1941 19.7062 20.0883 19.4604 20.1395 19.5935C20.2488 19.8667 20.3444 20.1467 20.4195 20.43C20.4571 20.5735 20.4912 20.7203 20.5185 20.8671C20.5322 20.9456 20.5458 21.0242 20.5595 21.1027C20.5629 21.13 20.58 21.1881 20.5766 21.2086C20.5731 21.1847 20.5697 21.1573 20.5663 21.1334C20.5697 21.1608 20.5731 21.1881 20.5766 21.212C20.621 21.591 20.621 21.9734 20.621 22.3524V23.3358C20.621 23.7046 20.9351 24.0188 21.3039 24.0188H22.9463H26.5486H30.0588H31.1548C31.4656 24.0188 31.766 24.0256 32.0631 23.8993C32.6299 23.6602 32.9816 23.1207 32.9987 22.5062C33.0021 22.3388 32.9987 22.1681 32.9987 21.9974V20.3175V20.198C32.9987 19.8394 32.6845 19.498 32.3157 19.515C31.9435 19.5423 31.6294 19.8257 31.6294 20.2082Z" />
                  </svg>
                </div>
                <div className="namename">{state.user.name}</div>
              </div>

              {/*<div className="row2">
                <div className="tit">Utenti attivi</div>
                <div className="data">
                  <span id='num'>{activeChat && activeChat.length}</span>
                  <span>
                    <svg width="68" height="17" viewBox="0 0 68 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <circle cx="9" cy="8.5" r="8.5" fill="#973031" />
                      <circle cx="21" cy="8.5" r="8.5" fill="#30978B" />
                      <circle cx="32" cy="8.5" r="8.5" fill="#FBBC05" />
                      <circle cx="41" cy="8.5" r="8.5" fill="#179BD7" />
                      <circle cx="50" cy="8.5" r="8.5" fill="#231F20" />
                      <circle cx="59" cy="8.5" r="8.5" fill="#CB17A3" />
                    </svg>
                  </span>
                  <span id='name'>{data.attiviArray[0].split(" ")[0]}...</span>
                </div>
              </div>*/}

              <div className="row3">
                {activeChat && activeChat.map((k) =>
                  <div key={k._id} className="personentry" onClick={() => { SETselected(k); SETwindowtoggle(!windowtoggle); handleAlreadyChat(k.leadId) }}>
                    {/* green, yellow, grey */}
                    <div className={"nome green"}>
                        {k.leadId && k.leadId.nome ? k.leadId.nome : null}
                    </div>
                    <div className="lastdate">{new Date(k.createdAt).toLocaleString()}</div>
                    <div className="lasttext">{k.messages.length > 0 ? k.messages[0].content : ''}</div>
                  </div>
                )}
              </div>
            </div>


            <div className={"leftwa " + (!windowtoggle ? "showwindow" : "")}>
              <div className="chatheader">
                <div>
                  {leadMessaging ? leadMessaging.name + ' ' + leadMessaging.surname : null}
                </div>
                <div id='status'>
                  {
                    leadMessaging ?
                      "Online"
                      :
                      "---"
                  }
                </div>
              </div>

              <div className="mainchat">
                {selected !== null
                  ?
                  selected.messages && selected.messages.map((msgdata, k) =>
                    <Message key={k} msgdata={msgdata.content} sender={msgdata.sender} timestamp={msgdata.timestamp} />
                  )
                  :
                  <>
                    <h4>Chat Vuota</h4><br /><br /><br /><br /><br /><br /><br />
                  </>


                }

              </div>


              <div className="chatfooter">
                <div className="notes">
                  <svg onClick={() => handlePasteClick()} width="30" height="38" viewBox="0 0 60 76" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M20.2935 0.00075655C15.8867 0.00075655 12.2892 2.98335 11.1204 6.94538C4.9755 7.13212 0 12.0792 0 18.137V64.7727C0 70.9475 5.16142 76 11.4707 76L48.5293 75.9994C54.8379 75.9994 60 70.9475 60 64.7721V18.1364C60 11.9617 54.8386 6.90915 48.5293 6.90915H29.4611C28.2806 2.96454 24.6887 0 20.2948 0L20.2935 0.00075655ZM20.2935 5.18281C22.7832 5.18281 24.7053 7.06412 24.7053 9.50093V27.637C24.7053 30.0739 22.7832 31.9552 20.2935 31.9552C17.8039 31.9552 15.8818 30.0739 15.8818 27.637V18.9906H10.5874V27.637C10.5874 32.8552 14.9623 37.1372 20.2935 37.1372C25.6248 37.1372 29.9997 32.8552 29.9997 27.637V12.0918H48.529C51.9966 12.0918 54.7053 14.743 54.7053 18.137V64.7727C54.7053 68.1668 51.9966 70.8179 48.529 70.8179H11.4704C8.00274 70.8179 5.29409 68.1668 5.29409 64.7727V18.137C5.29409 14.743 8.00274 12.0918 11.4704 12.0918H15.8821V9.50078C15.8821 7.06397 17.8042 5.18266 20.2939 5.18266L20.2935 5.18281ZM16.7645 41.455V46.6371H43.2349V41.455H16.7645ZM16.7645 50.9552V56.1373H43.2349V50.9552H16.7645ZM16.7645 60.4554V65.6374H43.2349V60.4554H16.7645Z" fill="white" />
                  </svg>
                </div>
                <div className="emojis">
                  <svg onClick={() => SETshowEmojis(!showEmojis)} width="36" height="36" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M36 71.9997C26.4523 71.9997 17.296 68.2069 10.5441 61.4556C3.79296 54.7039 0 45.5465 0 35.9999C0 26.4532 3.79281 17.2959 10.5441 10.5441C17.2959 3.79295 26.4533 0 36 0C45.5467 0 54.704 3.7928 61.4559 10.5441C68.207 17.2958 72 26.4532 72 35.9999C72 42.3194 70.3366 48.527 67.1768 53.9999C64.017 59.4728 59.4728 64.0171 53.9999 67.1769C48.5269 70.3366 42.3193 72 35.9997 72L36 71.9997ZM36 5.14229C27.8162 5.14229 19.9674 8.39332 14.1809 14.1802C8.39395 19.9671 5.1429 27.8158 5.1429 35.9993C5.1429 44.1828 8.39395 52.0318 14.1809 57.8183C19.9678 63.6052 27.8165 66.8562 36 66.8562C44.1835 66.8562 52.0326 63.6052 57.8191 57.8183C63.6061 52.0314 66.8571 44.1828 66.8571 35.9993C66.8571 27.8158 63.6061 19.9667 57.8191 14.1802C52.0322 8.39332 44.1835 5.14229 36 5.14229ZM49.3974 46.2853C49.8566 45.4817 49.852 44.4934 49.3859 43.6937C48.9193 42.8942 48.0617 42.404 47.136 42.408C46.2101 42.412 45.3567 42.9103 44.8975 43.7138C43.0574 46.8862 39.6673 48.8383 36.0001 48.8383C32.333 48.8383 28.943 46.8862 27.1028 43.7138C26.6436 42.9102 25.7901 42.412 24.8643 42.408C23.9384 42.404 23.0809 42.8942 22.6143 43.6937C22.1483 44.4933 22.1437 45.4817 22.6029 46.2853C24.4104 49.4491 27.2791 51.8714 30.7006 53.1231C34.1227 54.3744 37.8777 54.3744 41.2998 53.1231C44.7213 51.8713 47.59 49.4491 49.3974 46.2853ZM47.1348 22.4224H47.1342C45.8577 22.4224 44.6333 22.9298 43.7311 23.8338C42.8294 24.7372 42.3237 25.9626 42.326 27.2393C42.3283 28.5164 42.838 29.7396 43.7437 30.6402C44.6489 31.5407 45.875 32.0441 47.1514 32.0395C48.4285 32.0349 49.6512 31.5229 50.55 30.6161C51.4489 29.7092 51.9499 28.4821 51.9431 27.2049C51.9781 25.91 51.4856 24.6563 50.5793 23.7305C49.673 22.8046 48.4303 22.2863 47.1343 22.2938L47.1348 22.4224ZM24.8661 22.4224C23.5878 22.4155 22.3594 22.9177 21.4521 23.8183C20.5452 24.7189 20.0338 25.9438 20.0314 27.222C20.0291 28.5002 20.536 29.7269 21.44 30.6308C22.344 31.5348 23.5706 32.0417 24.8489 32.0394C26.1271 32.0371 27.352 31.5257 28.2526 30.6188C29.1532 29.7113 29.6554 28.483 29.6485 27.2048C29.6761 25.9162 29.1853 24.6707 28.2864 23.7472C27.387 22.8242 26.1546 22.3001 24.8661 22.2938L24.8661 22.4224Z" fill="white" />
                  </svg>
                  {showEmojis &&
                    <EmojiPicker onEmojiClick={onEmojiClick} />
                  }
                </div>
                <div className="input">
                  <input onKeyPress={handleKeyPress} value={inputMsg} type="text" placeholder='Scrivi un messaggio...' onChange={(e) => SETinputMsg(e.target.value)} />
                  <svg onClick={() => sendMessageTest()} width="37" height="30" viewBox="0 0 37 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M0.727563 14.3591C0.727525 14.3591 0.727521 14.359 0.727559 14.359L35.9521 0.668348C36.1774 0.581135 36.4208 0.639193 36.5772 0.824511C36.7334 1.00628 36.759 1.25701 36.6391 1.46769L30.3478 12.4508C30.2641 12.596 30.1371 12.6906 29.9698 12.7233L21.669 14.3334C21.4036 14.3844 21.2147 14.6133 21.2147 14.8823C21.2147 15.1512 21.4001 15.3802 21.669 15.4311L29.9698 17.0447C30.1369 17.0774 30.2641 17.1682 30.3478 17.3137L36.6391 28.2935C36.759 28.5042 36.7336 28.7514 36.5772 28.9367C36.4211 29.1185 36.1774 29.1803 35.9521 29.0929L0.727437 15.3983C0.509664 15.3149 0.371499 15.1151 0.371499 14.8788C0.371499 14.6426 0.509614 14.4428 0.727571 14.3592C0.727605 14.3591 0.727601 14.3591 0.727563 14.3591Z" fill="#3471CC" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>
      }
            {infoPopup &&
            <PopupModify
              onClose={JustClosePopup}
              lead={selectLead}
              setPopupModify={() => setInfoPopup(false)}
              deleteLead={deleteLead}
              popupRef={popupRef}
              setInfoPopup={setInfoPopup}
              fetchLeads={fetchLeads}
            />
          }
    </div>
  )
}
